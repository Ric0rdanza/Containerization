apiVersion: apps/v1 
kind: Deployment 
metadata: 
  name: {{ include "database.fullname" . }}
spec: 
  replicas: {{ .Values.replicaCount }}
  selector: 
    matchLabels: {{- include "database.selectorLabels" . | nindent 6 }}
  template: 
    metadata: 
      labels: {{- include "database.selectorLabels" . | nindent 8 }}
    spec: 
      containers: 
        - name: {{ .Chart.Name }}
          image: {{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports: 
            - containerPort: {{ .Values.service.port }}
              name: http 
          envFrom: 
            - configMapRef: 
                name: postgres-config
          env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_PASSWORD
            - name: POSTGRES_USER
              valueFrom:
                configMapKeyRef:
                  name: postgres-config
                  key: POSTGRES_USER
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: postgres-config
                  key: POSTGRES_DB
          lifecycle: 
            postStart: 
              exec: 
                command: 
                  - /bin/sh
                  - -c
                  - sleep 50 && PGPASSWORD=$POSTGRES_PASSWORD psql -w -d $POSTGRES_DB -U $POSTGRES_USER -c 'CREATE TABLE IF NOT EXISTS users (username TEXT PRIMARY KEY,password TEXT);CREATE TABLE IF NOT EXISTS urls (originalurl TEXT PRIMARY KEY,shorturl TEXT);CREATE TABLE IF NOT EXISTS ownership (username TEXT,shorturl TEXT);'

          volumeMounts: 
            - mountPath: /var/lib/postgresql/data
              name: postgredb
      volumes: 
        - name: postgredb
          persistentVolumeClaim: 
            claimName: postgres-pv-claim 
