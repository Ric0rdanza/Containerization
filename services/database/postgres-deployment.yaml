apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgres-pv-volume
  labels:
    type: local
    app: postgres
spec:
  accessModes:
    - ReadWriteMany
  capacity:
    storage: 5Gi
  hostPath:
    path: "/data/"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pv-claim
  labels:
    app: postgres
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 5Gi
---
apiVersion: apps/v1 
kind: Deployment 
metadata: 
  name: postgres-deployment 
spec: 
  replicas: 1 
  selector: 
    matchLabels: 
      app: postgres 
  template: 
    metadata: 
      labels: 
        app: postgres 
    spec: 
      containers: 
        - name: postgres-container 
          image: postgres:13.9-alpine 
          imagePullPolicy: "IfNotPresent" 
          ports: 
            - containerPort: 5432
              name: http 
          envFrom: 
            - configMapRef: 
                name: postgres-config
          env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_PASSWORD
            - name: POSTGRES_USER
              valueFrom:
                configMapKeyRef:
                  name: postgres-config
                  key: POSTGRES_USER
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: postgres-config
                  key: POSTGRES_DB
          lifecycle: 
            postStart: 
              exec: 
                command: ["/bin/sh", "-c", "sleep 50 && PGPASSWORD=$POSTGRES_PASSWORD psql -w -d $POSTGRES_DB -U $POSTGRES_USER -c 'CREATE TABLE IF NOT EXISTS users (username TEXT PRIMARY KEY,password TEXT);'"]
          volumeMounts: 
            - mountPath: /var/lib/postgresql/data
              name: postgredb
      volumes: 
        - name: postgredb
          persistentVolumeClaim: 
            claimName: postgres-pv-claim 
